[{"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\index.js":"1","E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\reportWebVitals.js":"2","E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\components\\Node.js":"3","E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\App.js":"4","E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\components\\Menubar.js":"5"},{"size":500,"mtime":1608291370048,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608291370048,"results":"8","hashOfConfig":"7"},{"size":3736,"mtime":1611676531150,"results":"9","hashOfConfig":"7"},{"size":6448,"mtime":1611671560589,"results":"10","hashOfConfig":"7"},{"size":2649,"mtime":1611659652256,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"dluvb1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\index.js",[],["24","25"],"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\reportWebVitals.js",[],"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\components\\Node.js",[],"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\App.js",["26"],"E:\\PORTFOLIO_STUFF\\reactandrust\\pathfinder-wasm\\pathfinder\\src\\components\\Menubar.js",["27"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Menubar.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport default function Menubar({ findPath, findPathKing, isPathThere }) {\r\n  const [isNavVisible, setNavVisibility] = useState(false);\r\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\r\n  const [isPath, setIsPath] = useState(isPathThere);\r\n  const [king, setKing] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia(\"(max-width: 700px)\");\r\n    mediaQuery.addEventListener(\"change\", handleMediaQueryChange);\r\n    handleMediaQueryChange(mediaQuery);\r\n\r\n    return () => {\r\n      mediaQuery.removeListener(handleMediaQueryChange);\r\n    };\r\n  }, []);\r\n\r\n  const handleMediaQueryChange = (mediaQuery) => {\r\n    if (mediaQuery.matches) {\r\n      setIsSmallScreen(true);\r\n    } else {\r\n      setIsSmallScreen(false);\r\n    }\r\n  };\r\n\r\n  const toggleNav = () => {\r\n    setNavVisibility(!isNavVisible);\r\n  };\r\n\r\n  const makePath = () => {\r\n    if (!isPath) {\r\n      // const el = document.getElementById(\"pathbutton\");\r\n      // // console.log(el);\r\n      // el.innerHTML = \"Find Path\";\r\n      // el.classList.add(\"btn-active\");\r\n      king ? findPathKing() : findPath();\r\n      // setIsPath(true);\r\n    } else {\r\n      const el = document.getElementById(\"pathbutton\");\r\n      el.innerHTML = \"Find Path\";\r\n      el.classList.add(\"btn-active\");\r\n      el.classList.remove(\"btn-inactive\");\r\n      // console.log(\"entered path\");\r\n      king ? findPathKing() : findPath();\r\n      // setIsPath(false);\r\n    }\r\n  };\r\n\r\n  const toggleKing = () => {\r\n    setKing(!king);\r\n    const el = document.getElementById(\"diag\");\r\n    if (king) {\r\n      el.classList.remove(\"toggle\");\r\n      el.classList.add(\"btn-inactive\");\r\n    } else {\r\n      el.classList.remove(\"btn-inactive\");\r\n      el.classList.add(\"toggle\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className=\"Header\">\r\n      <CSSTransition\r\n        in={!isSmallScreen || isNavVisible}\r\n        timeout={350}\r\n        classNames=\"NavAnimation\"\r\n        unmountOnExit\r\n      >\r\n        <nav className=\"Nav\">\r\n          <button\r\n            className={isPath ? \"btn-active\" : \"btn-inactive\"}\r\n            id=\"pathbutton\"\r\n            onClick={makePath}\r\n          >\r\n            {isPath ? \"Find Path\" : \"No Path\"}\r\n          </button>\r\n          <button className=\"toggle\" id=\"diag\" onClick={toggleKing}>\r\n            {king ? \"Diagonal allowed\" : \"Diagonal disabled\"}\r\n          </button>\r\n        </nav>\r\n      </CSSTransition>\r\n      <button onClick={toggleNav} className=\"Burger\">\r\n        ...\r\n      </button>\r\n    </header>\r\n  );\r\n}\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":9,"column":10,"nodeType":"34","messageId":"35","endLine":9,"endColumn":15},{"ruleId":"32","severity":1,"message":"36","line":8,"column":18,"nodeType":"34","messageId":"35","endLine":8,"endColumn":27},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","'setIsPath' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]